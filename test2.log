init Population with:
	 - population_size = 16
	 - num_stages = (3, 5)
	 - gens = [('100', '0000100001'), ('110', '0000100100'), ('010', '1111001000'), ('101', '1000100000'), ('100', '1101100101'), ('010', '1111110101'), ('111', '0011001110'), ('100', '1011001001'), ('111', '0101001010'), ('101', '0010101110'), ('001', '0000000111'), ('011', '1110011111'), ('011', '0110110101'), ('100', '1111101101'), ('110', '0110100110'), ('011', '1111010011')]
	 - list of individuals = [{'S_1': '1-00', 'S_2': '0-00-010-0001'}, {'S_1': '1-10', 'S_2': '0-00-010-0100'}, {'S_1': '0-10', 'S_2': '1-11-100-1000'}, {'S_1': '1-01', 'S_2': '1-00-010-0000'}, {'S_1': '1-00', 'S_2': '1-10-110-0101'}, {'S_1': '0-10', 'S_2': '1-11-111-0101'}, {'S_1': '1-11', 'S_2': '0-01-100-1110'}, {'S_1': '1-00', 'S_2': '1-01-100-1001'}, {'S_1': '1-11', 'S_2': '0-10-100-1010'}, {'S_1': '1-01', 'S_2': '0-01-010-1110'}, {'S_1': '0-01', 'S_2': '0-00-000-0111'}, {'S_1': '0-11', 'S_2': '1-11-001-1111'}, {'S_1': '0-11', 'S_2': '0-11-011-0101'}, {'S_1': '1-00', 'S_2': '1-11-110-1101'}, {'S_1': '1-10', 'S_2': '0-11-010-0110'}, {'S_1': '0-11', 'S_2': '1-11-101-0011'}]
	 - crossover_probability = 0.2
	 - mutation_probability = 0.8
	 - crossover_rate = 0.5
	 - mutation_rate = 0.015
---------------------------------------------

Start generation # 0...

	fitness_function

		Training {'S_1': '1-00', 'S_2': '0-00-010-0001'}
/usr/local/lib/python3.7/dist-packages/torch/nn/functional.py:718: UserWarning: Named tensors and all their associated APIs are an experimental feature and subject to change. Please do not use them for anything important until they are released as stable. (Triggered internally at  /pytorch/c10/core/TensorImpl.h:1156.)
  return torch.max_pool2d(input, kernel_size, stride, padding, dilation, ceil_mode)
		Fitness = 0.99030000
		---------------------------------------------

		Training {'S_1': '1-10', 'S_2': '0-00-010-0100'}
		Fitness = 0.99300000
		---------------------------------------------

		Training {'S_1': '0-10', 'S_2': '1-11-100-1000'}
		Fitness = 0.99310000
		---------------------------------------------

		Training {'S_1': '1-01', 'S_2': '1-00-010-0000'}
		Fitness = 0.98580000
		---------------------------------------------

		Training {'S_1': '1-00', 'S_2': '1-10-110-0101'}
		Fitness = 0.99010000
		---------------------------------------------

		Training {'S_1': '0-10', 'S_2': '1-11-111-0101'}
		Fitness = 0.98890000
		---------------------------------------------

		Training {'S_1': '1-11', 'S_2': '0-01-100-1110'}
		Fitness = 0.99400000
		---------------------------------------------

		Training {'S_1': '1-00', 'S_2': '1-01-100-1001'}
		Fitness = 0.99200000
		---------------------------------------------

		Training {'S_1': '1-11', 'S_2': '0-10-100-1010'}
		Fitness = 0.99320000
		---------------------------------------------

		Training {'S_1': '1-01', 'S_2': '0-01-010-1110'}
		Fitness = 0.99220000
		---------------------------------------------

		Training {'S_1': '0-01', 'S_2': '0-00-000-0111'}
		Fitness = 0.99250000
		---------------------------------------------

		Training {'S_1': '0-11', 'S_2': '1-11-001-1111'}
		Fitness = 0.99410000
		---------------------------------------------

		Training {'S_1': '0-11', 'S_2': '0-11-011-0101'}
		Fitness = 0.99100000
		---------------------------------------------

		Training {'S_1': '1-00', 'S_2': '1-11-110-1101'}
		Fitness = 0.99190000
		---------------------------------------------

		Training {'S_1': '1-10', 'S_2': '0-11-010-0110'}
		Fitness = 0.99210000
		---------------------------------------------

		Training {'S_1': '0-11', 'S_2': '1-11-101-0011'}
		Fitness = 0.99230000
		---------------------------------------------

		Maximize of Population: {'S_1': '0-11', 'S_2': '1-11-001-1111'} - Fitness = 0.99410000

	=============================================

	selection_function

		gens after select = [('100', '1111101101'), ('111', '0011001110'), ('011', '1110011111'), ('110', '0000100100'), ('111', '0011001110'), ('011', '1110011111'), ('110', '0110100110'), ('110', '0000100100'), ('111', '0101001010'), ('110', '0000100100'), ('011', '0110110101'), ('011', '1110011111'), ('011', '1110011111'), ('011', '1111010011'), ('010', '1111001000'), ('111', '0101001010')]
		list of individuals after select = [{'S_1': '1-00', 'S_2': '1-11-110-1101'}, {'S_1': '1-11', 'S_2': '0-01-100-1110'}, {'S_1': '0-11', 'S_2': '1-11-001-1111'}, {'S_1': '1-10', 'S_2': '0-00-010-0100'}, {'S_1': '1-11', 'S_2': '0-01-100-1110'}, {'S_1': '0-11', 'S_2': '1-11-001-1111'}, {'S_1': '1-10', 'S_2': '0-11-010-0110'}, {'S_1': '1-10', 'S_2': '0-00-010-0100'}, {'S_1': '1-11', 'S_2': '0-10-100-1010'}, {'S_1': '1-10', 'S_2': '0-00-010-0100'}, {'S_1': '0-11', 'S_2': '0-11-011-0101'}, {'S_1': '0-11', 'S_2': '1-11-001-1111'}, {'S_1': '0-11', 'S_2': '1-11-001-1111'}, {'S_1': '0-11', 'S_2': '1-11-101-0011'}, {'S_1': '0-10', 'S_2': '1-11-100-1000'}, {'S_1': '1-11', 'S_2': '0-10-100-1010'}]

	=============================================

	crossover_function

		Crossover 2 Individual:
			 - {'S_1': '1-00', 'S_2': '1-11-110-1101'}
			 - {'S_1': '1-11', 'S_2': '0-01-100-1110'}
		To 2 new Individual:
			 - {'S_1': '1-11', 'S_2': '1-11-110-1101'}
			 - {'S_1': '1-00', 'S_2': '0-01-100-1110'}
		---------------------------------------------

		Crossover 2 Individual:
			 - {'S_1': '1-11', 'S_2': '0-01-100-1110'}
			 - {'S_1': '0-11', 'S_2': '1-11-001-1111'}
		To 2 new Individual:
			 - {'S_1': '1-11', 'S_2': '1-11-001-1111'}
			 - {'S_1': '0-11', 'S_2': '0-01-100-1110'}
		---------------------------------------------

	=============================================

	mutation_function

	=============================================

End generation # 0...

---------------------------------------------

Start generation # 1...

	fitness_function

		Training {'S_1': '1-11', 'S_2': '1-11-110-1101'}
		Fitness = 0.99240000
		---------------------------------------------

		Training {'S_1': '1-00', 'S_2': '0-01-100-1110'}
		Fitness = 0.99110000
		---------------------------------------------

		Training {'S_1': '1-11', 'S_2': '1-11-001-1111'}
		Fitness = 0.99330000
		---------------------------------------------

		Training {'S_1': '0-11', 'S_2': '0-01-100-1110'}
		Fitness = 0.99220000
		---------------------------------------------

		Maximize of Population: {'S_1': '0-11', 'S_2': '1-11-001-1111'} - Fitness = 0.99410000

	=============================================

	selection_function

		gens after select = [('011', '1110011111'), ('011', '1110011111'), ('011', '1110011111'), ('111', '0101001010'), ('011', '1110011111'), ('011', '1110011111'), ('011', '1110011111'), ('111', '0101001010'), ('111', '0101001010'), ('011', '1110011111'), ('011', '1110011111'), ('111', '0101001010'), ('111', '0101001010'), ('111', '1110011111'), ('011', '1110011111'), ('011', '1110011111')]
		list of individuals after select = [{'S_1': '0-11', 'S_2': '1-11-001-1111'}, {'S_1': '0-11', 'S_2': '1-11-001-1111'}, {'S_1': '0-11', 'S_2': '1-11-001-1111'}, {'S_1': '1-11', 'S_2': '0-10-100-1010'}, {'S_1': '0-11', 'S_2': '1-11-001-1111'}, {'S_1': '0-11', 'S_2': '1-11-001-1111'}, {'S_1': '0-11', 'S_2': '1-11-001-1111'}, {'S_1': '1-11', 'S_2': '0-10-100-1010'}, {'S_1': '1-11', 'S_2': '0-10-100-1010'}, {'S_1': '0-11', 'S_2': '1-11-001-1111'}, {'S_1': '0-11', 'S_2': '1-11-001-1111'}, {'S_1': '1-11', 'S_2': '0-10-100-1010'}, {'S_1': '1-11', 'S_2': '0-10-100-1010'}, {'S_1': '1-11', 'S_2': '1-11-001-1111'}, {'S_1': '0-11', 'S_2': '1-11-001-1111'}, {'S_1': '0-11', 'S_2': '1-11-001-1111'}]

	=============================================

	crossover_function

		Crossover 2 Individual:
			 - {'S_1': '0-11', 'S_2': '1-11-001-1111'}
			 - {'S_1': '1-11', 'S_2': '0-10-100-1010'}
		To 2 new Individual:
			 - {'S_1': '1-11', 'S_2': '1-11-001-1111'}
			 - {'S_1': '0-11', 'S_2': '0-10-100-1010'}
		---------------------------------------------

		Crossover 2 Individual:
			 - {'S_1': '0-11', 'S_2': '1-11-001-1111'}
			 - {'S_1': '1-11', 'S_2': '0-10-100-1010'}
		To 2 new Individual:
			 - {'S_1': '1-11', 'S_2': '1-11-001-1111'}
			 - {'S_1': '0-11', 'S_2': '0-10-100-1010'}
		---------------------------------------------

	=============================================

	mutation_function

	=============================================

End generation # 1...

---------------------------------------------

Start generation # 2...

	fitness_function

		Training {'S_1': '1-11', 'S_2': '1-11-001-1111'}
		Fitness = 0.99170000
		---------------------------------------------

		Training {'S_1': '0-11', 'S_2': '0-10-100-1010'}
		Fitness = 0.99300000
		---------------------------------------------

		Training {'S_1': '1-11', 'S_2': '1-11-001-1111'}
		Fitness = 0.99200000
		---------------------------------------------

		Training {'S_1': '0-11', 'S_2': '0-10-100-1010'}
		Fitness = 0.99020000
		---------------------------------------------

		Maximize of Population: {'S_1': '0-11', 'S_2': '1-11-001-1111'} - Fitness = 0.99410000

	=============================================

	selection_function

		gens after select = [('011', '1110011111'), ('011', '1110011111'), ('011', '1110011111'), ('011', '1110011111'), ('011', '1110011111'), ('011', '1110011111'), ('011', '1110011111'), ('011', '1110011111'), ('011', '1110011111'), ('011', '1110011111'), ('011', '1110011111'), ('011', '1110011111'), ('011', '1110011111'), ('011', '1110011111'), ('011', '1110011111'), ('011', '1110011111')]
		list of individuals after select = [{'S_1': '0-11', 'S_2': '1-11-001-1111'}, {'S_1': '0-11', 'S_2': '1-11-001-1111'}, {'S_1': '0-11', 'S_2': '1-11-001-1111'}, {'S_1': '0-11', 'S_2': '1-11-001-1111'}, {'S_1': '0-11', 'S_2': '1-11-001-1111'}, {'S_1': '0-11', 'S_2': '1-11-001-1111'}, {'S_1': '0-11', 'S_2': '1-11-001-1111'}, {'S_1': '0-11', 'S_2': '1-11-001-1111'}, {'S_1': '0-11', 'S_2': '1-11-001-1111'}, {'S_1': '0-11', 'S_2': '1-11-001-1111'}, {'S_1': '0-11', 'S_2': '1-11-001-1111'}, {'S_1': '0-11', 'S_2': '1-11-001-1111'}, {'S_1': '0-11', 'S_2': '1-11-001-1111'}, {'S_1': '0-11', 'S_2': '1-11-001-1111'}, {'S_1': '0-11', 'S_2': '1-11-001-1111'}, {'S_1': '0-11', 'S_2': '1-11-001-1111'}]

	=============================================

	crossover_function

	=============================================

	mutation_function

		Mutation Individual: {'S_1': '0-11', 'S_2': '1-11-001-1111'}
		To new Individual: {'S_1': '1-11', 'S_2': '1-11-001-1111'}
		---------------------------------------------

	=============================================

End generation # 2...

---------------------------------------------

Final evaluate Population

	fitness_function

		Training {'S_1': '1-11', 'S_2': '1-11-001-1111'}
		Fitness = 0.99160000
		---------------------------------------------

		Maximize of Population: {'S_1': '0-11', 'S_2': '1-11-001-1111'} - Fitness = 0.99410000

	=============================================
